export const examples = [
  // Example 1
  `// Roman Zhuravlov, TR-71, 2020

// –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥, —â–æ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î –≤—Å—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–æ—ó –º–æ–≤–∏ Tyson:
// ‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –≤–∏—Ä–∞–∑–∏
// ‚Ä¢ –õ–æ–≥—ñ—á–Ω—ñ –≤–∏—Ä–∞–∑–∏
// ‚Ä¢ –¶–∏–∫–ª–∏ for
// ‚Ä¢ –¶–∏–∫–ª–∏ while
// ‚Ä¢ –¶–∏–∫–ª–∏ do while

{
  let key = 123;
}

'single quote string';
"double quote string";

var integer = 123;
let double = 1.23;
const myVariable = 7;

for (let i = 1; i < 5; i += 1) {
  if (i === 1) {
    log(i +" turtle üê¢");
  }
  else if (i % 2 === 0) {
    log(i +" turtles üê¢");
  } else {
    log(i +" ducks ü¶Ü");
  }
}

if (1 == 2) {
  key = 1;
}
else if (2 == 2) {
  key = 2;
}
else {
  key = 3;
}

log("Key = " + key);
`,

  // Example 2
  `// Tyson –ø—ñ–¥—Ç—Ä–∏–º—É—î —á–∏—Å–ª–∞, —Å–∏–º–≤–æ–ª—å–Ω—ñ —Ä—è–¥–∫–∏, –ª–æ–≥—ñ—á–Ω—ñ –≤–∏—Ä–∞–∑–∏
// —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è null

'single quote string';
"double quote string";

1;
1.02;
 .03;

true;
false;

null;

// –î–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è
// Type IdentName [= Exp];

let UndefinedVariable;

var integer = 123;
let double = 1.23;
const myVariable = true;

// –í—Å—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è —É –≤–∫–ª–∞–¥—Ü—ñ '–ü–∞—Ä—Å–µ—Ä', –≤ —Ä–æ–∑–¥—ñ–ª—ñ 'Variables'
`,

  // Example 3
  `// –î–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∫–æ–¥—É –Ω–∞ –µ–∫—Ä–∞–Ω, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞ 'log'
// Log –≤–∏–≤–æ–¥–∏—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ–≥–æ –≤–∏—Ä–∞–∑—É –≤ –≤–∫–ª–∞–¥–∫—É '–ü–∞—Ä—Å–µ—Ä' —Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ (F12)
log(7 + 2 * (3 - 1));

// –û–ø–µ—Ä–∞—Ü—ñ—ó –æ–±—Ä–æ–±–ª—é—Ç—å—Å—è –ª–æ–≥—ñ–∫–∞–æ—é Javascript,
// —Ç–æ–º—É –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —á–∏—Å–µ–ª —Ç–∞ —Å—Ç—Ä–æ–∫ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –¥–∏–Ω–∞–º—ñ—á–Ω–∞ —Ç–∏–ø–∏–∑–∞—Ü—ñ—è
log(21 + " test");

// Tyson –ø—ñ–¥—Ç—Ä–∏–º—É—î —Å—Ç—Ä–æ–≥–µ —Ç–∞ –Ω–µ—Å—Ç—Ä–æ–≥–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
log(3 === '3');
log(3 == '3');

log(5 !== '5');
log(5 != '5');

// –¢–∞ –ª–æ–≥—ñ—á–Ω—ñ –≤–∏—Ä–∞–∑–∏, –æ–±'—î–¥–Ω–∞–Ω—ñ –∫–æ–º–∞–Ω–¥–∞–º–∏ || —Ç–∞ &&
log(false || true);

let i = 2;

log(i >= 2 && i < 8);
log(i < 3 || i > 5);
`,

  // Example 4
  `// –¶–∏–∫–ª–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ for, while —Ç–∞ do while
// –ù–∞ –µ—Ç–∞–ø—ñ –ø–µ—Ä–µ–∫–ª–∞–¥—É –∫–æ–¥—É –≤ –æ–±–µ—Ä–Ω–µ–Ω—É –ø–æ–ª—å—Å–∫—É –Ω–æ—Ç–∞—Ü—ñ—é, –Ω–∞ –º—ñ—Å—Ü—è —É–º–æ–≤–∏ –≤–∏—Ö–æ–¥—É –∑ —Ü–∏–∫–ª—ñ–≤
// –≤—Å—Ç–∞–≤–ª—è—é—Ç—å—Å—è —Å–ø–µ—Ü—ñ–ª—å–Ω—ñ –º—ñ—Ç–∫–∏ —Ñ–æ—Ä–º–∞—Ç—É #index, —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏ $GoTo —Ç–∞ $CondGoTo.
// –ü–µ—Ä–µ–ª—ñ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –º—ñ—Ç–æ–∫ —Ç–∞ —ó—Ö —ñ–Ω–¥–µ–∫—Å –≤ –º–∞—Å–∏–≤—ñ —Ç–æ–∫–µ–Ω—ñ–≤ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è —É –≤–∫–ª–∞–¥—Ü—ñ '–ü–∞—Ä—Å–µ—Ä',
// –≤ —Ä–æ–∑–¥—ñ–ª—ñ 'Anchors'
for (let i = 0; i < 10; i += 1) {
  log(i % 5);
}

let output = "";
let j = 0;

do {
  if (j % 2 === 0) {
    output += "üôà";
  } else {
    output += "üôâ";
  }
  j += 1;
} while (j <= 10);

log(output);
`,

  // Example 5
  `// Tyson –ø—ñ–¥—Ç—Ä–∏–º—É—î –ª–æ–≥—ñ—á–Ω—ñ –≤–∏—Ä–∞–∑–∏
// –í —Ç–∞–±–ª–∏—Ü—ñ —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó –∫–æ–¥—É –æ—Å—Ç–∞–Ω–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó 'i' –¥–æ—Ä—ñ–≤–Ω—é—î 2
// –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —É–º–æ–≤—É –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –¥—É–∂–æ–∫ —Ç–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
let i = 0;

if (1 == 2) {
  i = 1;
}
else if (2 == 2) {
  i = 2;
}
else {
  i = 3;
}

log("I is equal to " + i);
`,

  // Example 6
  `// –°—Ç–≤–æ—Ä–µ–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç—Ä–∞–Ω—Å–ª—è—Ç–æ—Ä–∞ –º–∞—î –∑–∞–ø–æ–±—ñ–∂–Ω–∏–∫ –≤—ñ–¥ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª—É
// –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–¥ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –ø—ñ—Å–ª—è —Å—Ç–∞ —Ç–∏—Å—è—á –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤,
// –∑–∞–ø–æ–±—ñ–≥–∞—é—á–∏ –∑–∞–≤–∏—Å–∞–Ω–Ω—é –ø—Ä–æ–≥—Ä–∞–º–∏
let i = 0;

while(true) {
  i += 1;
}
`,

  // Example 7
  `// –Ø–∫—â–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ñ–π –∑–º—ñ–Ω–Ω—ñ–π —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è,
// –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –Ω–µ–æ–≥–æ–ª–æ—à–µ–Ω—É –∑–º—ñ–Ω–Ω—É,
// –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–¥—É –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é

const i = false;
i = true;


if (i === undecliredValirable) {
  log("üíÄ");
}
`,

  // Example 8
  `// –õ–µ–∫—Å–∏—á–Ω—ñ —Ç–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è –≤ –≤–∫–ª–∞–¥–∫–∞—Ö '–õ–µ–∫—Å–µ–º–∏' —Ç–∞ '–°–∏–Ω—Ç–∞–∫—Å–∏—Å' –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ
// –í –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø—Ä–∏–∫–ª–∞–¥—ñ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–∫—Ä–∏–≤–∞—é—á–∞ –¥—É–∂–∫–∞
// –í—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–≤–µ–¥–µ–Ω–æ —á–µ—Ä–≤–æ–Ω–∏–º –∫–æ–ª—å–æ—Ä–æ–º —É –≤–∫–ª–∞–¥—Ü—ñ '–°–∏–Ω—Ç–∞–∫—Å–∏—Å'

let i = 2;


if (i === 3) {
  log("Seems like you missong a bracket");


log('This log is missing semicolon')

let 123Ident = "–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ –Ω–µ –º–æ–∂—É—Ç—å –ø–æ—á–∏–Ω–∞—Ç–∏—Å—å –∑ —Ü–∏—Ñ—Ä–∏";
`,
];
